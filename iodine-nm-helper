#!/bin/bash
#helper for iodine. Expected to have /etc/iodine-nm-helper.conf
#(c) George Shuklin, 2013. Licensed under GPL v2 terms (cee COPYING for details)

CONFIG=/etc/iodine-nm-helper.conf
DEBUG=1

test -x `which iodine`||(echo "iodine not found, exiting";exit -1)
if [ `whoami` != root ]; then
    echo "Iodine and ip route in this script require root priveleges."
    echo "Use sudo $0, Luke."
    exit -1
fi
source $CONFIG || (echo "Unable tio parse $CONFIG. Exiting";exit -1)
# expected variables:
# IODINE_SERVIER - domain name to connect via
# IODINE_PASS - password for iodine connection
# MTU - mtu size (not mandatory)
# REMOTE - remote (intunnel) address of server (IP iodined started on server with)
export LC_ALL=C
export LANG=C
test -z "$IODINE_SERVER"  || (echo "IODINE_SERVER not defined, exiting";exit -1)
test -z "$IODINE_PASS"  ||(echo "IODINE_PASS not defined, exiting";exit -1)
test -z |"$REMOTE"||(echo "REMOTE is not defined";exit -1)

if [ -n $MTU ]; then
    mtu_opt="-m $MTU"
fi

function active_nm_connection(){
    #return uuid of active connection or empty line
    status=`nmcli -f state nm|tail -n -1`
    if [ $status = connected ] ; then
        nmcli -f uuid con status|tail -n -1
    fi
}

conn=`active_nm_connection`
if [ -z $conn ]; then 
    echo "No active connection, exiting"
    exit 1
fi

raw_net_settings=`nmcli -f IP conn status uuid $conn|grep "IP4.ADDRESS"|awk -F ':' '{print $2}'`
ip_address=`echo "$raw_net_settings"|awk -F ',' '{print $1}'|awk -F '=' '{print $2}'`
gw_address=`echo "$raw_net_settings"|awk -F ',' '{print $2}'|awk -F '=' '{print $2}'`
dns_array=(`nmcli -f IP conn status uuid $conn|grep "IP4.DNS"|awk -F ':' '{print $2}'`)

if [ $DEBUG -eq 1 ]; then
    echo connection = $conn
    echo IP = $ip_address
    echo GW = $gw_address
    echo -n DNS:;echo ${dns_array[*]}|xargs -n 1 -d ' ' echo -e "\t"
    echo Routing plan:
    echo -n ${dns_array[*]} |xargs -d ' ' -I DNS -n 1 echo -e "\tip route add DNS/32 via $gw_address"
    echo -e "\tip route delete default"
    echo -e "\tip route add default via $REMOTE"
fi

iodine -r $mtu_opt -P "$IODINE_PASS" "$IODINE_SERVER" 
echo -n ${dns_array[*]} |xargs -d ' ' -I DNS -n 1 ip route add DNS/32 via $gw_address
ip route delete default
ip route add default via $REMOTE
ping -c 1 8.8.4.4
echo '[DONE]'

